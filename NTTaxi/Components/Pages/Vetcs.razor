@page "/vetcs"

<div class="flex gap-2 bg-gray-900 p-2 text-gray-100">
    <button class="rounded bg-red-600 px-3 py-1 hover:bg-red-700"
            @onclick="@(AppendFormatGoogleSheetAsync)">
        LoadData
    </button>
    <button class="rounded bg-blue-600 px-3 py-1 hover:bg-blue-700"
            @onclick="@(() => LoadProvinceAsync("BLU"))">
        Bạc Liêu
    </button>
    <button class="rounded bg-blue-600 px-3 py-1 hover:bg-blue-700"
            @onclick="@(() => LoadProvinceAsync("VLG"))">
        Vĩnh Long
    </button>
    <button class="rounded bg-blue-600 px-3 py-1 hover:bg-blue-700"
            @onclick="@(() => LoadProvinceAsync("STG"))">
        Sóc Trăng
    </button>
</div>

@if (!loaded_form)
{
    <div class="flex min-h-screen items-center justify-center bg-gray-100">
        <div class="flex flex-col gap-4 rounded-2xl bg-gray-900 p-6 text-gray-100 shadow-lg">
            <div class="text-sm text-teal-400">@loadedForm_string</div>

            @if (!isAuthenticated)
            {
                <div class="flex flex-col gap-4">
                    <div class="flex flex-col">
                        <label class="mb-1 text-sm">Tài khoản:</label>
                        <input class="rounded border border-gray-600 bg-gray-800 px-3 py-2 text-gray-100 focus:border-teal-500 focus:outline-none"
                               @bind="userVetc.username" />
                    </div>

                    <div class="flex flex-col">
                        <label class="mb-1 text-sm">Mật khẩu:</label>
                        <input type="password"
                               class="rounded border border-gray-600 bg-gray-800 px-3 py-2 text-gray-100 focus:border-teal-500 focus:outline-none"
                               @bind="userVetc.password" />
                    </div>

                    <button class="rounded-xl bg-green-500 px-4 py-2 text-sm font-semibold text-white transition hover:bg-green-600 disabled:cursor-not-allowed disabled:bg-gray-500"
                            @onclick="(() => Login(currentProvider))" disabled="@isLoading">
                        @(isLoading ? "Đang đăng nhập..." : "Đăng nhập")
                    </button>

                    <span class="text-sm text-teal-400">@authenStatus</span>
                </div>
            }
        </div>
    </div>

}
else
{
    <div class="mt-2 w-full">
        <div class="mt-2">
            <div class="flex bg-gray-900 p-2 text-gray-100">
                <div class="mb-4 text-2xl font-bold text-green-400">VETC Control Panel</div>
            </div>
        </div>
        <div class="flex flex-wrap items-center gap-4 bg-gray-900 p-4 text-gray-100">
            <div>
                <label class="px-2">Tài khoản:</label>
                <input class="rounded border border-gray-600 bg-gray-800 px-2 py-1 text-gray-100"
                       @bind="userVetc.username" />
            </div>
            <div>
                <label class="px-2">Mật khẩu:</label>
                <input type="password"
                       class="rounded border border-gray-600 bg-gray-800 px-2 py-1 text-gray-100"
                       @bind="userVetc.password" />
            </div>
            <button class="rounded-xl bg-green-500 px-2 py-1 text-sm text-white hover:bg-green-600 disabled:cursor-not-allowed disabled:bg-gray-500"
                    @onclick="(() => Login(currentProvider))" disabled="@isLoading">
                @(isLoading ? "Đang đăng nhập..." : "Đăng nhập")
            </button><span class="text-teal-700">@authenStatus</span>
        </div>
        <div class="mt-2">
            <div class="flex flex-wrap items-center gap-4 bg-gray-900 p-4 text-gray-100">
                <div>
                    <label class="px-2">Bắt đầu:</label>
                    <input class="rounded border border-gray-600 px-2 py-1"
                           @bind="startDate" />
                </div>
                <div>
                    <label class="px-2">Kết thúc:</label>
                    <input class="rounded border border-gray-600 px-2 py-1"
                           @bind="endDate" />
                </div>
                <button class="rounded-xl bg-green-500 px-2 py-1 text-sm text-white hover:bg-green-600 disabled:cursor-not-allowed disabled:bg-gray-500"
                        @onclick="(() => AppendGoogleSheetAsync())" disabled="@isGetsRecording">
                    @(isGetsRecording ? "Đang lấy dữ liệu..." : "Ghi dữ liệu")
                </button><span class="text-teal-700">@saveGGSheet</span>
            </div>
        </div>

        @if (vetcItems == null)
        {
            <p>Đang tải dữ liệu...</p>
        }
        else if (!vetcItems.Any())
        {
            <p>Chưa có đơn hàng nào.</p>
        }
        else
        {
            <div class="my-3">
                Tổng cuốc: (15/@vetcItems.Count)
                <a href="https://docs.google.com/spreadsheets/d/1NlFKTU6Rqe5F1AJqzv_nML1-Lve7ScBLD9QuvR9YuUA/edit?gid=0#gid=0"
                   target="_blank" class="text-blue-500 underline hover:text-blue-700">
                    Chi tiết
                </a>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-700 bg-gray-900 text-gray-100">
                    <thead class="bg-gray-800">
                        <tr>
                            <th class="px-4 py-2 text-left">Mã Giao Dịch</th>
                            <th class="px-4 py-2 text-left">Biễn số xe</th>
                            <th class="px-4 py-2 text-left">Trạm</th>
                            <th class="px-4 py-2 text-left">Giá</th>
                            <th class="px-4 py-2 text-left">Thời gian qua trạm</th>
                            <th class="px-4 py-2 text-left">Trạng thái</th>
                            <th class="px-4 py-2 text-left">Loại</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-700">
                        @foreach (var order in vetcItems.Take(15))
                        {
                            <tr class="hover:bg-gray-700">
                                <td class="px-4 py-2">@order.TransportTransId</td>
                                <td class="px-4 py-2">@order.Plate</td>
                                <td class="px-4 py-2">@order.CheckInName</td>
                                <td class="px-4 py-2">@order.Amount</td>
                                <td class="px-4 py-2">@order.CheckerOutDateTime</td>
                                <td class="px-4 py-2">@order.Pass</td>
                                <td class="px-4 py-2">@order.PriceTicketType</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}
@code {
    [Inject] private IVETCService vetcService { get; set; } = default!;

    private string authenStatus = "";
    private bool loaded_form = false;
    private string saveGGSheet = "";
    private bool isLoading = false;
    private bool isGetsRecording = false;
    private string loadedForm_string { get; set; } = "Đang tải...";
    private DateTime startDate { get; set; } = DateTime.Now.AddDays(-1);
    private DateTime endDate { get; set; } = DateTime.Now.AddDays(-1);
    private bool isAuthenticated = true;

    private UserVetc userVetc { get; set; } = new UserVetc();
    private List<VetcItem> vetcItems { get; set; } = new List<VetcItem>();
    private RootObjectVetc rootVetc { get; set; } = new RootObjectVetc();
    private SchemaJsonVetc jsonVetc { get; set; } = new SchemaJsonVetc();
    private string currentProvider = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            rootVetc = JsonSerializer.Deserialize<RootObjectVetc>(await File.ReadAllTextAsync("VetcAuthentication.json"))!;

        }
        catch (Exception ex)
        {
            authenStatus = $"{ex.Message}";
        }
    }

    private async Task Login(string codeProvider)
    {
        try
        {
            isLoading = true; // Disable button
            authenStatus = await vetcService.GetAuthenticationAsync(userVetc, currentProvider)
                ? "Đăng nhập thành công, đã ghi nhớ tài khoản!"
                : "Tài khoản đăng nhập không đúng vui lòng nhập lại!";
            if (authenStatus.Contains("Đăng nhập thành công"))
            {
                loaded_form = true;
                // Payload để lấy dữ liệu
                var payload = new GetsPayload
                {
                    accountid = jsonVetc.accountid,
                    fromdate = startDate.ToString("dd/MM/yyyy"),
                    toDate = endDate.ToString("dd/MM/yyyy"),
                };

                // Lấy dữ liệu theo đúng tỉnh
                vetcItems = await vetcService.GetsVetcAsync(payload);
            }
            isAuthenticated = true;
        }
        catch (Exception ex)
        {
            authenStatus = "Đăng nhập thất bại, vui lòng nhập lại!";
        }
        finally
        {
            isLoading = false; // Enable button sau khi xử lý xong
            StateHasChanged(); // Cập nhật lại giao diện
        }
    }

    private async Task AppendGoogleSheetAsync()
    {
        try
        {
            isGetsRecording = true; // Disable button
            /// Lấy đúng tỉnh theo code
            jsonVetc = currentProvider switch
            {
                "BLU" => rootVetc.BLU,
                "VLG" => rootVetc.VLG,
                "STG" => rootVetc.STG,
                _ => null
            };

            var payload = new GetsPayload
            {
                accountid = jsonVetc.accountid,
                fromdate = startDate.ToString("dd/MM/yyyy"),
                toDate = endDate.ToString("dd/MM/yyyy"),
            };
            
            vetcItems = await vetcService.PostVetcAsync(payload, currentProvider);

            saveGGSheet = $"Ghi dữ liệu thành công";
        }
        catch (Exception ex)
        {
            saveGGSheet = $"Lỗi: {ex.Message}";
        }
        finally
        {
            isGetsRecording = false; // Enable button sau khi xử lý xong
        }
    }

    private async Task AppendFormatGoogleSheetAsync()
    {
        try
        {
            isGetsRecording = true; // Disable button

            // Đăng nhập
            var listProvider = new List<string> { "BLU", "VLG", "STG" };
            var payload = new GetsPayload
            {
                accountid = jsonVetc.accountid,
                fromdate = startDate.ToString("dd/MM/yyyy"),
                toDate = endDate.ToString("dd/MM/yyyy"),
            };

            foreach (var item in listProvider)
            {
                jsonVetc = item switch
                {
                    "BLU" => rootVetc.BLU,
                    "VLG" => rootVetc.VLG,
                    "STG" => rootVetc.STG,
                    _ => null
                };
                userVetc = jsonVetc.User;
                await vetcService.GetAuthenticationAsync(userVetc, item);
                vetcItems = await vetcService.FormatPostsVetcAsync(payload, item);
            };

            saveGGSheet = $"Ghi dữ liệu thành công";
        }
        catch (Exception ex)
        {
            saveGGSheet = $"Lỗi: {ex.Message}";
        }
        finally
        {
            isGetsRecording = false; // Enable button sau khi xử lý xong
        }
    }

    private async Task LoadProvinceAsync(string codeProvider)
    {
        try
        {
            vetcItems = new List<VetcItem>(); // Reset danh sách sau khi chuyển tab
            isAuthenticated = true; // Reset danh sách sau khi chuyển tab
            loaded_form = false;
            authenStatus ="";
            loadedForm_string = $"Đang tải dữ liệu...";
            currentProvider = codeProvider;
            saveGGSheet = "";

            // Lấy đúng tỉnh theo code
            jsonVetc = codeProvider switch
            {
                "BLU" => rootVetc.BLU,
                "VLG" => rootVetc.VLG,
                "STG" => rootVetc.STG,
                _ => null
            };

            if (jsonVetc == null)
            {
                loadedForm_string = "Không tìm thấy tỉnh!";
                return;
            }
            else
            {
                userVetc = jsonVetc.User;
                // Đăng nhập
                var loggedIn = await vetcService.GetAuthenticationAsync(userVetc, codeProvider);
                if (!loggedIn)
                {
                    loadedForm_string = "Đăng nhập thất bại, vui lòng nhập lại tài khoản!";
                    isAuthenticated = false;
                    return;
                }
                else
                {
                    // Payload để lấy dữ liệu
                    var payload = new GetsPayload
                    {
                        accountid = jsonVetc.accountid,
                        fromdate = startDate.ToString("dd/MM/yyyy"),
                        toDate = endDate.ToString("dd/MM/yyyy"),
                    };

                    // Lấy dữ liệu theo đúng tỉnh
                    vetcItems = await vetcService.GetsVetcAsync(payload);
                }

            }
            loaded_form = true;
        }
        catch (Exception ex)
        {
            loadedForm_string = $"Lỗi: {ex.Message}";
            isAuthenticated = false;
        }
    }
}
